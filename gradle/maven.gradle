import java.util.regex.Pattern;

apply plugin: 'maven-publish'

publishing {

    publications {
        mod(MavenPublication) {
            groupId modowner
            artifactId modname
            version version
            artifact archives
            artifact sourceJar
            artifact javadocJar
            artifact modZip
        }
    }

    repositories {
        maven {
            url System.getenv('MAVEN_REPO_URL')
            credentials {
                username = System.getenv('MAVEN_DEPLOYER_NAME')
                password = System.getenv('MAVEN_DEPLOYER_PASSWORD')
            }

        }
    }
}

def rcPattern=Pattern.compile("((\\d+)\\.(\\d+)\\.(\\d+)-\\w+-KG(\\d+))-RC(\\d+)");
def snapshotPattern=Pattern.compile("((\\d+)\\.(\\d+)\\.(\\d+)-\\w+-KG(\\d+))-SNAPSHOT");
def finalPattern=Pattern.compile("((\\d+)\\.(\\d+)\\.(\\d+)-\\w+-KG(\\d+))-FINAL");


def setVersion(newVersion) {
    def propsFile = new File("./gradle.properties")
    propsFile.write(propsFile.text.replaceAll('(?m)^version=.*$', "version=$newVersion"))
}

/*
 * Increases version within gradle.properties
 * If version ends with "-RCX" the new version
 * ends with "-RC(X+1)". If the version does
 * not end with "-RCX" this task checks whether
 * the current version is a SNAPSHOT and creates
 * the 1st RC version. If the version is currently 
 * a FINAL version this task increases the
 * minor version and creates the first RC. If none
 * of the patterns match, this task fails the build.
 */
task rcNext() << {
    def currentVersion = version;
    def rcMatcher=rcPattern.matcher(version);
    def newVersion;
    if (rcMatcher.matches()) {
        def rcNumber = rcMatcher.group(6).toInteger();
        newVersion = rcMatcher.group(1) + "-RC" + (++rcNumber);
        println("Incremented release candidate $version to $newVersion.");
    } else {
        def snapshotMatcher = snapshotPattern.matcher(version);
        if (snapshotMatcher.matches()) {
            newVersion = snapshotMatcher.group(1) + "-RC1";
            println("Made SNAPSHOT $version the first RC $newVersion.");
        } else {
            def finalMatcher = finalPattern.matcher(version);
            if (finalMatcher.matches()) {
                newVersion = [finalMatcher.group(2),finalMatcher.group(3),finalMatcher.group(4),finalMatcher.group(5).toInteger()+1].join(".") + "-RC1"
                println("Increased minor version of $version and made the first RC $newVersion.");
            } else {
                throw new StopExecutionException("Current version $version does not match any known version pattern.");
            }
        }
    }
    setVersion(newVersion)
}

task version() << {
    println version
}

/*
 * Grabs a rc version and finalizes it.
 */
task rcFinal() << {
    def currentVersion = version;
    def rcMatcher=rcPattern.matcher(version);
    if (rcMatcher.matches()) {
        def newVersion = rcMatcher.group(1) + "-FINAL";
        println("Made release candidate $version final: $newVersion.");
        setVersion(newVersion)
    } else {
        throw new StopExecutionException("Current version $version is not a RC version pattern.");
    }
}
